<?php


/**
 * Skeleton subclass for representing a row from the 'fare' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 02/01/11 10:34:31
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Fare extends BaseFare {

  public function save(PropelPDO $con = null)
  {
      $this->setDatetime($this->getDate()." ".$this->getTime());

      $this->setPriceIncludingTax($this->getDistance() * 2 + 22.5 + $this->getSupplement());
      $this->setVat($this->getPrice() * 0.055);
      $this->setPrice($this->getPriceIncludingTax()-$this->getVat());

      if(!$this->getDriverId()) {
        $driver = $this->chooseDriver();
        if($driver) {
            $this->setDriver($driver);
        }
      }

      Location::storeLocation(substr($this->getStartAddress(), 0, 250));
      Location::storeLocation(substr($this->getEndAddress(), 0, 250));

      return parent::save($con);
  }

  public function chooseDriver() {
          if($this->getCustomerId() && $this->getDriver()) {
              $driver = $this->getDriverCustomer()->getDriver();
              if($driver->getsfGuardUser()->isAvailable($this)) {
                  return $driver;
              }
          }

          if($this->getTaxiCode()) {
              $driver = DriverPeer::retrieveByTaxiCode($this->getTaxiCode());
              if($driver->getsfGuardUser()->isAvailable($this)) {
                  return $driver;
              }
          }

          $c = new Criteria();
          $drivers = DriverPeer::doSelect($c);
          foreach($drivers as $driver) {
            if($driver->getsfGuardUser()->isAvailable($this)) {
                return $driver;
            }
          }
  }

  public function isIncoming(){
      if($this->getDatetime() > date('Y-m-d H:i:s')) {
          return true;
      }
      else {
          return false;
      }
  }

  public function isPending(){
      if($this->getDatetime() < date('Y-m-d H:i:s') && $this->getDone() != 1) {
          return true;
      }
      else {
          return false;
      }
  }

  public function valid() {

      $this->setDone(1);
      $this->save();

      $account = new DriverAccount();
      $account->setCategoryId(1);
      $account->setDriver($this->getDriver());
      $account->setAmount($this->getPrice());
      $account->save();

      $pa = new DriverAccount();
      $pa->setCategoryId(2);
      $pa->setDriver($this->getDriver());
      $pa->setAmount(round(-6));
      $pa->save();

      $participation = new Participation();
      $participation->setDriver($this->getDriver());
      $participation->setFare($this);
      $participation->setAmount(6);
      $participation->save();

      $customer = DriverCustomerPeer::retrieveByPK($this->getCustomerId());

      if($customer->getDriverId() != $this->getDriverId()) {
      $p = new DriverAccount();
      $p->setCategoryId(3);
      $p->setDriver($this->getDriver());
      $p->setAmount(-6);
      $p->save();

      $p2 = new DriverAccount();
      $p2->setCategoryId(3);
      $p2->setDriver($customer->getDriver());
      $p2->setAmount(6);
      $p2->save();

      $prime = new Prime();
      $prime->setDriverId($customer->getDriver()->getId());
      $prime->setPayerId($this->getDriverId());
      $prime->setFare($this);
      $prime->setAmount(6);
      $prime->save();
      }
      
  }


} // Fare
