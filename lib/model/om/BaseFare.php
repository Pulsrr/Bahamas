<?php

/**
 * Base class that represents a row from the 'fare' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sat Mar 12 00:34:49 2011
 *
 * @package    lib.model.om
 */
abstract class BaseFare extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        FarePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the hash field.
	 * @var        string
	 */
	protected $hash;

	/**
	 * The value for the driver_id field.
	 * @var        int
	 */
	protected $driver_id;

	/**
	 * The value for the customer_id field.
	 * @var        int
	 */
	protected $customer_id;

	/**
	 * The value for the start_address field.
	 * @var        string
	 */
	protected $start_address;

	/**
	 * The value for the flight_number field.
	 * @var        string
	 */
	protected $flight_number;

	/**
	 * The value for the start_lat field.
	 * @var        string
	 */
	protected $start_lat;

	/**
	 * The value for the start_lng field.
	 * @var        string
	 */
	protected $start_lng;

	/**
	 * The value for the end_address field.
	 * @var        string
	 */
	protected $end_address;

	/**
	 * The value for the end_lat field.
	 * @var        string
	 */
	protected $end_lat;

	/**
	 * The value for the end_lng field.
	 * @var        string
	 */
	protected $end_lng;

	/**
	 * The value for the date field.
	 * @var        string
	 */
	protected $date;

	/**
	 * The value for the time field.
	 * @var        string
	 */
	protected $time;

	/**
	 * The value for the taxi_code field.
	 * @var        string
	 */
	protected $taxi_code;

	/**
	 * The value for the datetime field.
	 * @var        string
	 */
	protected $datetime;

	/**
	 * The value for the duration field.
	 * @var        int
	 */
	protected $duration;

	/**
	 * The value for the distance field.
	 * @var        int
	 */
	protected $distance;

	/**
	 * The value for the real_start_lat field.
	 * @var        string
	 */
	protected $real_start_lat;

	/**
	 * The value for the real_start_lng field.
	 * @var        string
	 */
	protected $real_start_lng;

	/**
	 * The value for the real_end_lat field.
	 * @var        string
	 */
	protected $real_end_lat;

	/**
	 * The value for the real_end_lng field.
	 * @var        string
	 */
	protected $real_end_lng;

	/**
	 * The value for the real_duration field.
	 * @var        int
	 */
	protected $real_duration;

	/**
	 * The value for the real_distance field.
	 * @var        int
	 */
	protected $real_distance;

	/**
	 * The value for the price field.
	 * @var        string
	 */
	protected $price;

	/**
	 * The value for the supplement field.
	 * @var        string
	 */
	protected $supplement;

	/**
	 * The value for the vat field.
	 * @var        string
	 */
	protected $vat;

	/**
	 * The value for the price_including_tax field.
	 * @var        string
	 */
	protected $price_including_tax;

	/**
	 * The value for the confirmed field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $confirmed;

	/**
	 * The value for the valid field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $valid;

	/**
	 * The value for the taken field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $taken;

	/**
	 * The value for the finished field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $finished;

	/**
	 * The value for the done field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $done;

	/**
	 * The value for the customer_available field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $customer_available;

	/**
	 * The value for the special_request field.
	 * @var        string
	 */
	protected $special_request;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * @var        Driver
	 */
	protected $aDriver;

	/**
	 * @var        DriverCustomer
	 */
	protected $aDriverCustomer;

	/**
	 * @var        array Prime[] Collection to store aggregation of Prime objects.
	 */
	protected $collPrimes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPrimes.
	 */
	private $lastPrimeCriteria = null;

	/**
	 * @var        array Participation[] Collection to store aggregation of Participation objects.
	 */
	protected $collParticipations;

	/**
	 * @var        Criteria The criteria used to select the current contents of collParticipations.
	 */
	private $lastParticipationCriteria = null;

	/**
	 * @var        array UserUnavailability[] Collection to store aggregation of UserUnavailability objects.
	 */
	protected $collUserUnavailabilitys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserUnavailabilitys.
	 */
	private $lastUserUnavailabilityCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'FarePeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->confirmed = false;
		$this->valid = false;
		$this->taken = false;
		$this->finished = false;
		$this->done = false;
		$this->customer_available = false;
	}

	/**
	 * Initializes internal state of BaseFare object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [hash] column value.
	 * 
	 * @return     string
	 */
	public function getHash()
	{
		return $this->hash;
	}

	/**
	 * Get the [driver_id] column value.
	 * 
	 * @return     int
	 */
	public function getDriverId()
	{
		return $this->driver_id;
	}

	/**
	 * Get the [customer_id] column value.
	 * 
	 * @return     int
	 */
	public function getCustomerId()
	{
		return $this->customer_id;
	}

	/**
	 * Get the [start_address] column value.
	 * 
	 * @return     string
	 */
	public function getStartAddress()
	{
		return $this->start_address;
	}

	/**
	 * Get the [flight_number] column value.
	 * 
	 * @return     string
	 */
	public function getFlightNumber()
	{
		return $this->flight_number;
	}

	/**
	 * Get the [start_lat] column value.
	 * 
	 * @return     string
	 */
	public function getStartLat()
	{
		return $this->start_lat;
	}

	/**
	 * Get the [start_lng] column value.
	 * 
	 * @return     string
	 */
	public function getStartLng()
	{
		return $this->start_lng;
	}

	/**
	 * Get the [end_address] column value.
	 * 
	 * @return     string
	 */
	public function getEndAddress()
	{
		return $this->end_address;
	}

	/**
	 * Get the [end_lat] column value.
	 * 
	 * @return     string
	 */
	public function getEndLat()
	{
		return $this->end_lat;
	}

	/**
	 * Get the [end_lng] column value.
	 * 
	 * @return     string
	 */
	public function getEndLng()
	{
		return $this->end_lng;
	}

	/**
	 * Get the [optionally formatted] temporal [date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDate($format = 'Y-m-d')
	{
		if ($this->date === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->date);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [time] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getTime($format = 'H:i:s')
	{
		if ($this->time === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->time);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->time, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [taxi_code] column value.
	 * 
	 * @return     string
	 */
	public function getTaxiCode()
	{
		return $this->taxi_code;
	}

	/**
	 * Get the [optionally formatted] temporal [datetime] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatetime($format = 'Y-m-d H:i:s')
	{
		if ($this->datetime === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->datetime);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datetime, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [duration] column value.
	 * 
	 * @return     int
	 */
	public function getDuration()
	{
		return $this->duration;
	}

	/**
	 * Get the [distance] column value.
	 * 
	 * @return     int
	 */
	public function getDistance()
	{
		return $this->distance;
	}

	/**
	 * Get the [real_start_lat] column value.
	 * 
	 * @return     string
	 */
	public function getRealStartLat()
	{
		return $this->real_start_lat;
	}

	/**
	 * Get the [real_start_lng] column value.
	 * 
	 * @return     string
	 */
	public function getRealStartLng()
	{
		return $this->real_start_lng;
	}

	/**
	 * Get the [real_end_lat] column value.
	 * 
	 * @return     string
	 */
	public function getRealEndLat()
	{
		return $this->real_end_lat;
	}

	/**
	 * Get the [real_end_lng] column value.
	 * 
	 * @return     string
	 */
	public function getRealEndLng()
	{
		return $this->real_end_lng;
	}

	/**
	 * Get the [real_duration] column value.
	 * 
	 * @return     int
	 */
	public function getRealDuration()
	{
		return $this->real_duration;
	}

	/**
	 * Get the [real_distance] column value.
	 * 
	 * @return     int
	 */
	public function getRealDistance()
	{
		return $this->real_distance;
	}

	/**
	 * Get the [price] column value.
	 * 
	 * @return     string
	 */
	public function getPrice()
	{
		return $this->price;
	}

	/**
	 * Get the [supplement] column value.
	 * 
	 * @return     string
	 */
	public function getSupplement()
	{
		return $this->supplement;
	}

	/**
	 * Get the [vat] column value.
	 * 
	 * @return     string
	 */
	public function getVat()
	{
		return $this->vat;
	}

	/**
	 * Get the [price_including_tax] column value.
	 * 
	 * @return     string
	 */
	public function getPriceIncludingTax()
	{
		return $this->price_including_tax;
	}

	/**
	 * Get the [confirmed] column value.
	 * 
	 * @return     boolean
	 */
	public function getConfirmed()
	{
		return $this->confirmed;
	}

	/**
	 * Get the [valid] column value.
	 * 
	 * @return     boolean
	 */
	public function getValid()
	{
		return $this->valid;
	}

	/**
	 * Get the [taken] column value.
	 * 
	 * @return     boolean
	 */
	public function getTaken()
	{
		return $this->taken;
	}

	/**
	 * Get the [finished] column value.
	 * 
	 * @return     boolean
	 */
	public function getFinished()
	{
		return $this->finished;
	}

	/**
	 * Get the [done] column value.
	 * 
	 * @return     boolean
	 */
	public function getDone()
	{
		return $this->done;
	}

	/**
	 * Get the [customer_available] column value.
	 * 
	 * @return     boolean
	 */
	public function getCustomerAvailable()
	{
		return $this->customer_available;
	}

	/**
	 * Get the [special_request] column value.
	 * 
	 * @return     string
	 */
	public function getSpecialRequest()
	{
		return $this->special_request;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = FarePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [hash] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setHash($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->hash !== $v) {
			$this->hash = $v;
			$this->modifiedColumns[] = FarePeer::HASH;
		}

		return $this;
	} // setHash()

	/**
	 * Set the value of [driver_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setDriverId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->driver_id !== $v) {
			$this->driver_id = $v;
			$this->modifiedColumns[] = FarePeer::DRIVER_ID;
		}

		if ($this->aDriver !== null && $this->aDriver->getId() !== $v) {
			$this->aDriver = null;
		}

		return $this;
	} // setDriverId()

	/**
	 * Set the value of [customer_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setCustomerId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->customer_id !== $v) {
			$this->customer_id = $v;
			$this->modifiedColumns[] = FarePeer::CUSTOMER_ID;
		}

		if ($this->aDriverCustomer !== null && $this->aDriverCustomer->getId() !== $v) {
			$this->aDriverCustomer = null;
		}

		return $this;
	} // setCustomerId()

	/**
	 * Set the value of [start_address] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setStartAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->start_address !== $v) {
			$this->start_address = $v;
			$this->modifiedColumns[] = FarePeer::START_ADDRESS;
		}

		return $this;
	} // setStartAddress()

	/**
	 * Set the value of [flight_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setFlightNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->flight_number !== $v) {
			$this->flight_number = $v;
			$this->modifiedColumns[] = FarePeer::FLIGHT_NUMBER;
		}

		return $this;
	} // setFlightNumber()

	/**
	 * Set the value of [start_lat] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setStartLat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->start_lat !== $v) {
			$this->start_lat = $v;
			$this->modifiedColumns[] = FarePeer::START_LAT;
		}

		return $this;
	} // setStartLat()

	/**
	 * Set the value of [start_lng] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setStartLng($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->start_lng !== $v) {
			$this->start_lng = $v;
			$this->modifiedColumns[] = FarePeer::START_LNG;
		}

		return $this;
	} // setStartLng()

	/**
	 * Set the value of [end_address] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setEndAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->end_address !== $v) {
			$this->end_address = $v;
			$this->modifiedColumns[] = FarePeer::END_ADDRESS;
		}

		return $this;
	} // setEndAddress()

	/**
	 * Set the value of [end_lat] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setEndLat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->end_lat !== $v) {
			$this->end_lat = $v;
			$this->modifiedColumns[] = FarePeer::END_LAT;
		}

		return $this;
	} // setEndLat()

	/**
	 * Set the value of [end_lng] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setEndLng($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->end_lng !== $v) {
			$this->end_lng = $v;
			$this->modifiedColumns[] = FarePeer::END_LNG;
		}

		return $this;
	} // setEndLng()

	/**
	 * Sets the value of [date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date !== null && $tmpDt = new DateTime($this->date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = FarePeer::DATE;
			}
		} // if either are not null

		return $this;
	} // setDate()

	/**
	 * Sets the value of [time] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setTime($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->time !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->time !== null && $tmpDt = new DateTime($this->time)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->time = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = FarePeer::TIME;
			}
		} // if either are not null

		return $this;
	} // setTime()

	/**
	 * Set the value of [taxi_code] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setTaxiCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->taxi_code !== $v) {
			$this->taxi_code = $v;
			$this->modifiedColumns[] = FarePeer::TAXI_CODE;
		}

		return $this;
	} // setTaxiCode()

	/**
	 * Sets the value of [datetime] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setDatetime($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datetime !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datetime !== null && $tmpDt = new DateTime($this->datetime)) ? $tmpDt->format('Y-m-d\\TH:i:sO') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d\\TH:i:sO') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datetime = ($dt ? $dt->format('Y-m-d\\TH:i:sO') : null);
				$this->modifiedColumns[] = FarePeer::DATETIME;
			}
		} // if either are not null

		return $this;
	} // setDatetime()

	/**
	 * Set the value of [duration] column.
	 * 
	 * @param      int $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setDuration($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->duration !== $v) {
			$this->duration = $v;
			$this->modifiedColumns[] = FarePeer::DURATION;
		}

		return $this;
	} // setDuration()

	/**
	 * Set the value of [distance] column.
	 * 
	 * @param      int $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setDistance($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->distance !== $v) {
			$this->distance = $v;
			$this->modifiedColumns[] = FarePeer::DISTANCE;
		}

		return $this;
	} // setDistance()

	/**
	 * Set the value of [real_start_lat] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setRealStartLat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->real_start_lat !== $v) {
			$this->real_start_lat = $v;
			$this->modifiedColumns[] = FarePeer::REAL_START_LAT;
		}

		return $this;
	} // setRealStartLat()

	/**
	 * Set the value of [real_start_lng] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setRealStartLng($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->real_start_lng !== $v) {
			$this->real_start_lng = $v;
			$this->modifiedColumns[] = FarePeer::REAL_START_LNG;
		}

		return $this;
	} // setRealStartLng()

	/**
	 * Set the value of [real_end_lat] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setRealEndLat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->real_end_lat !== $v) {
			$this->real_end_lat = $v;
			$this->modifiedColumns[] = FarePeer::REAL_END_LAT;
		}

		return $this;
	} // setRealEndLat()

	/**
	 * Set the value of [real_end_lng] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setRealEndLng($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->real_end_lng !== $v) {
			$this->real_end_lng = $v;
			$this->modifiedColumns[] = FarePeer::REAL_END_LNG;
		}

		return $this;
	} // setRealEndLng()

	/**
	 * Set the value of [real_duration] column.
	 * 
	 * @param      int $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setRealDuration($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->real_duration !== $v) {
			$this->real_duration = $v;
			$this->modifiedColumns[] = FarePeer::REAL_DURATION;
		}

		return $this;
	} // setRealDuration()

	/**
	 * Set the value of [real_distance] column.
	 * 
	 * @param      int $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setRealDistance($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->real_distance !== $v) {
			$this->real_distance = $v;
			$this->modifiedColumns[] = FarePeer::REAL_DISTANCE;
		}

		return $this;
	} // setRealDistance()

	/**
	 * Set the value of [price] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setPrice($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->price !== $v) {
			$this->price = $v;
			$this->modifiedColumns[] = FarePeer::PRICE;
		}

		return $this;
	} // setPrice()

	/**
	 * Set the value of [supplement] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setSupplement($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->supplement !== $v) {
			$this->supplement = $v;
			$this->modifiedColumns[] = FarePeer::SUPPLEMENT;
		}

		return $this;
	} // setSupplement()

	/**
	 * Set the value of [vat] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setVat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vat !== $v) {
			$this->vat = $v;
			$this->modifiedColumns[] = FarePeer::VAT;
		}

		return $this;
	} // setVat()

	/**
	 * Set the value of [price_including_tax] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setPriceIncludingTax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->price_including_tax !== $v) {
			$this->price_including_tax = $v;
			$this->modifiedColumns[] = FarePeer::PRICE_INCLUDING_TAX;
		}

		return $this;
	} // setPriceIncludingTax()

	/**
	 * Set the value of [confirmed] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setConfirmed($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->confirmed !== $v || $this->isNew()) {
			$this->confirmed = $v;
			$this->modifiedColumns[] = FarePeer::CONFIRMED;
		}

		return $this;
	} // setConfirmed()

	/**
	 * Set the value of [valid] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setValid($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->valid !== $v || $this->isNew()) {
			$this->valid = $v;
			$this->modifiedColumns[] = FarePeer::VALID;
		}

		return $this;
	} // setValid()

	/**
	 * Set the value of [taken] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setTaken($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->taken !== $v || $this->isNew()) {
			$this->taken = $v;
			$this->modifiedColumns[] = FarePeer::TAKEN;
		}

		return $this;
	} // setTaken()

	/**
	 * Set the value of [finished] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setFinished($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->finished !== $v || $this->isNew()) {
			$this->finished = $v;
			$this->modifiedColumns[] = FarePeer::FINISHED;
		}

		return $this;
	} // setFinished()

	/**
	 * Set the value of [done] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setDone($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->done !== $v || $this->isNew()) {
			$this->done = $v;
			$this->modifiedColumns[] = FarePeer::DONE;
		}

		return $this;
	} // setDone()

	/**
	 * Set the value of [customer_available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setCustomerAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->customer_available !== $v || $this->isNew()) {
			$this->customer_available = $v;
			$this->modifiedColumns[] = FarePeer::CUSTOMER_AVAILABLE;
		}

		return $this;
	} // setCustomerAvailable()

	/**
	 * Set the value of [special_request] column.
	 * 
	 * @param      string $v new value
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setSpecialRequest($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->special_request !== $v) {
			$this->special_request = $v;
			$this->modifiedColumns[] = FarePeer::SPECIAL_REQUEST;
		}

		return $this;
	} // setSpecialRequest()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Fare The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d\\TH:i:sO') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d\\TH:i:sO') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d\\TH:i:sO') : null);
				$this->modifiedColumns[] = FarePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->confirmed !== false) {
				return false;
			}

			if ($this->valid !== false) {
				return false;
			}

			if ($this->taken !== false) {
				return false;
			}

			if ($this->finished !== false) {
				return false;
			}

			if ($this->done !== false) {
				return false;
			}

			if ($this->customer_available !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->hash = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->driver_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->customer_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->start_address = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->flight_number = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->start_lat = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->start_lng = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->end_address = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->end_lat = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->end_lng = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->date = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->time = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->taxi_code = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->datetime = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->duration = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->distance = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->real_start_lat = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->real_start_lng = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->real_end_lat = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->real_end_lng = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->real_duration = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->real_distance = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->price = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->supplement = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->vat = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->price_including_tax = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->confirmed = ($row[$startcol + 27] !== null) ? (boolean) $row[$startcol + 27] : null;
			$this->valid = ($row[$startcol + 28] !== null) ? (boolean) $row[$startcol + 28] : null;
			$this->taken = ($row[$startcol + 29] !== null) ? (boolean) $row[$startcol + 29] : null;
			$this->finished = ($row[$startcol + 30] !== null) ? (boolean) $row[$startcol + 30] : null;
			$this->done = ($row[$startcol + 31] !== null) ? (boolean) $row[$startcol + 31] : null;
			$this->customer_available = ($row[$startcol + 32] !== null) ? (boolean) $row[$startcol + 32] : null;
			$this->special_request = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->created_at = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 35; // 35 = FarePeer::NUM_COLUMNS - FarePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Fare object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aDriver !== null && $this->driver_id !== $this->aDriver->getId()) {
			$this->aDriver = null;
		}
		if ($this->aDriverCustomer !== null && $this->customer_id !== $this->aDriverCustomer->getId()) {
			$this->aDriverCustomer = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FarePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = FarePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aDriver = null;
			$this->aDriverCustomer = null;
			$this->collPrimes = null;
			$this->lastPrimeCriteria = null;

			$this->collParticipations = null;
			$this->lastParticipationCriteria = null;

			$this->collUserUnavailabilitys = null;
			$this->lastUserUnavailabilityCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FarePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseFare:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				FarePeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseFare:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FarePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseFare:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			
			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(FarePeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseFare:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				FarePeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aDriver !== null) {
				if ($this->aDriver->isModified() || $this->aDriver->isNew()) {
					$affectedRows += $this->aDriver->save($con);
				}
				$this->setDriver($this->aDriver);
			}

			if ($this->aDriverCustomer !== null) {
				if ($this->aDriverCustomer->isModified() || $this->aDriverCustomer->isNew()) {
					$affectedRows += $this->aDriverCustomer->save($con);
				}
				$this->setDriverCustomer($this->aDriverCustomer);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = FarePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = FarePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += FarePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collPrimes !== null) {
				foreach ($this->collPrimes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collParticipations !== null) {
				foreach ($this->collParticipations as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserUnavailabilitys !== null) {
				foreach ($this->collUserUnavailabilitys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aDriver !== null) {
				if (!$this->aDriver->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aDriver->getValidationFailures());
				}
			}

			if ($this->aDriverCustomer !== null) {
				if (!$this->aDriverCustomer->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aDriverCustomer->getValidationFailures());
				}
			}


			if (($retval = FarePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collPrimes !== null) {
					foreach ($this->collPrimes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collParticipations !== null) {
					foreach ($this->collParticipations as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserUnavailabilitys !== null) {
					foreach ($this->collUserUnavailabilitys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FarePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getHash();
				break;
			case 2:
				return $this->getDriverId();
				break;
			case 3:
				return $this->getCustomerId();
				break;
			case 4:
				return $this->getStartAddress();
				break;
			case 5:
				return $this->getFlightNumber();
				break;
			case 6:
				return $this->getStartLat();
				break;
			case 7:
				return $this->getStartLng();
				break;
			case 8:
				return $this->getEndAddress();
				break;
			case 9:
				return $this->getEndLat();
				break;
			case 10:
				return $this->getEndLng();
				break;
			case 11:
				return $this->getDate();
				break;
			case 12:
				return $this->getTime();
				break;
			case 13:
				return $this->getTaxiCode();
				break;
			case 14:
				return $this->getDatetime();
				break;
			case 15:
				return $this->getDuration();
				break;
			case 16:
				return $this->getDistance();
				break;
			case 17:
				return $this->getRealStartLat();
				break;
			case 18:
				return $this->getRealStartLng();
				break;
			case 19:
				return $this->getRealEndLat();
				break;
			case 20:
				return $this->getRealEndLng();
				break;
			case 21:
				return $this->getRealDuration();
				break;
			case 22:
				return $this->getRealDistance();
				break;
			case 23:
				return $this->getPrice();
				break;
			case 24:
				return $this->getSupplement();
				break;
			case 25:
				return $this->getVat();
				break;
			case 26:
				return $this->getPriceIncludingTax();
				break;
			case 27:
				return $this->getConfirmed();
				break;
			case 28:
				return $this->getValid();
				break;
			case 29:
				return $this->getTaken();
				break;
			case 30:
				return $this->getFinished();
				break;
			case 31:
				return $this->getDone();
				break;
			case 32:
				return $this->getCustomerAvailable();
				break;
			case 33:
				return $this->getSpecialRequest();
				break;
			case 34:
				return $this->getCreatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = FarePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getHash(),
			$keys[2] => $this->getDriverId(),
			$keys[3] => $this->getCustomerId(),
			$keys[4] => $this->getStartAddress(),
			$keys[5] => $this->getFlightNumber(),
			$keys[6] => $this->getStartLat(),
			$keys[7] => $this->getStartLng(),
			$keys[8] => $this->getEndAddress(),
			$keys[9] => $this->getEndLat(),
			$keys[10] => $this->getEndLng(),
			$keys[11] => $this->getDate(),
			$keys[12] => $this->getTime(),
			$keys[13] => $this->getTaxiCode(),
			$keys[14] => $this->getDatetime(),
			$keys[15] => $this->getDuration(),
			$keys[16] => $this->getDistance(),
			$keys[17] => $this->getRealStartLat(),
			$keys[18] => $this->getRealStartLng(),
			$keys[19] => $this->getRealEndLat(),
			$keys[20] => $this->getRealEndLng(),
			$keys[21] => $this->getRealDuration(),
			$keys[22] => $this->getRealDistance(),
			$keys[23] => $this->getPrice(),
			$keys[24] => $this->getSupplement(),
			$keys[25] => $this->getVat(),
			$keys[26] => $this->getPriceIncludingTax(),
			$keys[27] => $this->getConfirmed(),
			$keys[28] => $this->getValid(),
			$keys[29] => $this->getTaken(),
			$keys[30] => $this->getFinished(),
			$keys[31] => $this->getDone(),
			$keys[32] => $this->getCustomerAvailable(),
			$keys[33] => $this->getSpecialRequest(),
			$keys[34] => $this->getCreatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FarePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setHash($value);
				break;
			case 2:
				$this->setDriverId($value);
				break;
			case 3:
				$this->setCustomerId($value);
				break;
			case 4:
				$this->setStartAddress($value);
				break;
			case 5:
				$this->setFlightNumber($value);
				break;
			case 6:
				$this->setStartLat($value);
				break;
			case 7:
				$this->setStartLng($value);
				break;
			case 8:
				$this->setEndAddress($value);
				break;
			case 9:
				$this->setEndLat($value);
				break;
			case 10:
				$this->setEndLng($value);
				break;
			case 11:
				$this->setDate($value);
				break;
			case 12:
				$this->setTime($value);
				break;
			case 13:
				$this->setTaxiCode($value);
				break;
			case 14:
				$this->setDatetime($value);
				break;
			case 15:
				$this->setDuration($value);
				break;
			case 16:
				$this->setDistance($value);
				break;
			case 17:
				$this->setRealStartLat($value);
				break;
			case 18:
				$this->setRealStartLng($value);
				break;
			case 19:
				$this->setRealEndLat($value);
				break;
			case 20:
				$this->setRealEndLng($value);
				break;
			case 21:
				$this->setRealDuration($value);
				break;
			case 22:
				$this->setRealDistance($value);
				break;
			case 23:
				$this->setPrice($value);
				break;
			case 24:
				$this->setSupplement($value);
				break;
			case 25:
				$this->setVat($value);
				break;
			case 26:
				$this->setPriceIncludingTax($value);
				break;
			case 27:
				$this->setConfirmed($value);
				break;
			case 28:
				$this->setValid($value);
				break;
			case 29:
				$this->setTaken($value);
				break;
			case 30:
				$this->setFinished($value);
				break;
			case 31:
				$this->setDone($value);
				break;
			case 32:
				$this->setCustomerAvailable($value);
				break;
			case 33:
				$this->setSpecialRequest($value);
				break;
			case 34:
				$this->setCreatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = FarePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setHash($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setDriverId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCustomerId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setStartAddress($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setFlightNumber($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setStartLat($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setStartLng($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setEndAddress($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setEndLat($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setEndLng($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDate($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTime($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setTaxiCode($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDatetime($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDuration($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDistance($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setRealStartLat($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setRealStartLng($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setRealEndLat($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setRealEndLng($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setRealDuration($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setRealDistance($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setPrice($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setSupplement($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setVat($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setPriceIncludingTax($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setConfirmed($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setValid($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setTaken($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setFinished($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setDone($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setCustomerAvailable($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setSpecialRequest($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setCreatedAt($arr[$keys[34]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(FarePeer::DATABASE_NAME);

		if ($this->isColumnModified(FarePeer::ID)) $criteria->add(FarePeer::ID, $this->id);
		if ($this->isColumnModified(FarePeer::HASH)) $criteria->add(FarePeer::HASH, $this->hash);
		if ($this->isColumnModified(FarePeer::DRIVER_ID)) $criteria->add(FarePeer::DRIVER_ID, $this->driver_id);
		if ($this->isColumnModified(FarePeer::CUSTOMER_ID)) $criteria->add(FarePeer::CUSTOMER_ID, $this->customer_id);
		if ($this->isColumnModified(FarePeer::START_ADDRESS)) $criteria->add(FarePeer::START_ADDRESS, $this->start_address);
		if ($this->isColumnModified(FarePeer::FLIGHT_NUMBER)) $criteria->add(FarePeer::FLIGHT_NUMBER, $this->flight_number);
		if ($this->isColumnModified(FarePeer::START_LAT)) $criteria->add(FarePeer::START_LAT, $this->start_lat);
		if ($this->isColumnModified(FarePeer::START_LNG)) $criteria->add(FarePeer::START_LNG, $this->start_lng);
		if ($this->isColumnModified(FarePeer::END_ADDRESS)) $criteria->add(FarePeer::END_ADDRESS, $this->end_address);
		if ($this->isColumnModified(FarePeer::END_LAT)) $criteria->add(FarePeer::END_LAT, $this->end_lat);
		if ($this->isColumnModified(FarePeer::END_LNG)) $criteria->add(FarePeer::END_LNG, $this->end_lng);
		if ($this->isColumnModified(FarePeer::DATE)) $criteria->add(FarePeer::DATE, $this->date);
		if ($this->isColumnModified(FarePeer::TIME)) $criteria->add(FarePeer::TIME, $this->time);
		if ($this->isColumnModified(FarePeer::TAXI_CODE)) $criteria->add(FarePeer::TAXI_CODE, $this->taxi_code);
		if ($this->isColumnModified(FarePeer::DATETIME)) $criteria->add(FarePeer::DATETIME, $this->datetime);
		if ($this->isColumnModified(FarePeer::DURATION)) $criteria->add(FarePeer::DURATION, $this->duration);
		if ($this->isColumnModified(FarePeer::DISTANCE)) $criteria->add(FarePeer::DISTANCE, $this->distance);
		if ($this->isColumnModified(FarePeer::REAL_START_LAT)) $criteria->add(FarePeer::REAL_START_LAT, $this->real_start_lat);
		if ($this->isColumnModified(FarePeer::REAL_START_LNG)) $criteria->add(FarePeer::REAL_START_LNG, $this->real_start_lng);
		if ($this->isColumnModified(FarePeer::REAL_END_LAT)) $criteria->add(FarePeer::REAL_END_LAT, $this->real_end_lat);
		if ($this->isColumnModified(FarePeer::REAL_END_LNG)) $criteria->add(FarePeer::REAL_END_LNG, $this->real_end_lng);
		if ($this->isColumnModified(FarePeer::REAL_DURATION)) $criteria->add(FarePeer::REAL_DURATION, $this->real_duration);
		if ($this->isColumnModified(FarePeer::REAL_DISTANCE)) $criteria->add(FarePeer::REAL_DISTANCE, $this->real_distance);
		if ($this->isColumnModified(FarePeer::PRICE)) $criteria->add(FarePeer::PRICE, $this->price);
		if ($this->isColumnModified(FarePeer::SUPPLEMENT)) $criteria->add(FarePeer::SUPPLEMENT, $this->supplement);
		if ($this->isColumnModified(FarePeer::VAT)) $criteria->add(FarePeer::VAT, $this->vat);
		if ($this->isColumnModified(FarePeer::PRICE_INCLUDING_TAX)) $criteria->add(FarePeer::PRICE_INCLUDING_TAX, $this->price_including_tax);
		if ($this->isColumnModified(FarePeer::CONFIRMED)) $criteria->add(FarePeer::CONFIRMED, $this->confirmed);
		if ($this->isColumnModified(FarePeer::VALID)) $criteria->add(FarePeer::VALID, $this->valid);
		if ($this->isColumnModified(FarePeer::TAKEN)) $criteria->add(FarePeer::TAKEN, $this->taken);
		if ($this->isColumnModified(FarePeer::FINISHED)) $criteria->add(FarePeer::FINISHED, $this->finished);
		if ($this->isColumnModified(FarePeer::DONE)) $criteria->add(FarePeer::DONE, $this->done);
		if ($this->isColumnModified(FarePeer::CUSTOMER_AVAILABLE)) $criteria->add(FarePeer::CUSTOMER_AVAILABLE, $this->customer_available);
		if ($this->isColumnModified(FarePeer::SPECIAL_REQUEST)) $criteria->add(FarePeer::SPECIAL_REQUEST, $this->special_request);
		if ($this->isColumnModified(FarePeer::CREATED_AT)) $criteria->add(FarePeer::CREATED_AT, $this->created_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(FarePeer::DATABASE_NAME);

		$criteria->add(FarePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Fare (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setHash($this->hash);

		$copyObj->setDriverId($this->driver_id);

		$copyObj->setCustomerId($this->customer_id);

		$copyObj->setStartAddress($this->start_address);

		$copyObj->setFlightNumber($this->flight_number);

		$copyObj->setStartLat($this->start_lat);

		$copyObj->setStartLng($this->start_lng);

		$copyObj->setEndAddress($this->end_address);

		$copyObj->setEndLat($this->end_lat);

		$copyObj->setEndLng($this->end_lng);

		$copyObj->setDate($this->date);

		$copyObj->setTime($this->time);

		$copyObj->setTaxiCode($this->taxi_code);

		$copyObj->setDatetime($this->datetime);

		$copyObj->setDuration($this->duration);

		$copyObj->setDistance($this->distance);

		$copyObj->setRealStartLat($this->real_start_lat);

		$copyObj->setRealStartLng($this->real_start_lng);

		$copyObj->setRealEndLat($this->real_end_lat);

		$copyObj->setRealEndLng($this->real_end_lng);

		$copyObj->setRealDuration($this->real_duration);

		$copyObj->setRealDistance($this->real_distance);

		$copyObj->setPrice($this->price);

		$copyObj->setSupplement($this->supplement);

		$copyObj->setVat($this->vat);

		$copyObj->setPriceIncludingTax($this->price_including_tax);

		$copyObj->setConfirmed($this->confirmed);

		$copyObj->setValid($this->valid);

		$copyObj->setTaken($this->taken);

		$copyObj->setFinished($this->finished);

		$copyObj->setDone($this->done);

		$copyObj->setCustomerAvailable($this->customer_available);

		$copyObj->setSpecialRequest($this->special_request);

		$copyObj->setCreatedAt($this->created_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getPrimes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPrime($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getParticipations() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addParticipation($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserUnavailabilitys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserUnavailability($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Fare Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     FarePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new FarePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Driver object.
	 *
	 * @param      Driver $v
	 * @return     Fare The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setDriver(Driver $v = null)
	{
		if ($v === null) {
			$this->setDriverId(NULL);
		} else {
			$this->setDriverId($v->getId());
		}

		$this->aDriver = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Driver object, it will not be re-added.
		if ($v !== null) {
			$v->addFare($this);
		}

		return $this;
	}


	/**
	 * Get the associated Driver object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Driver The associated Driver object.
	 * @throws     PropelException
	 */
	public function getDriver(PropelPDO $con = null)
	{
		if ($this->aDriver === null && ($this->driver_id !== null)) {
			$this->aDriver = DriverPeer::retrieveByPk($this->driver_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aDriver->addFares($this);
			 */
		}
		return $this->aDriver;
	}

	/**
	 * Declares an association between this object and a DriverCustomer object.
	 *
	 * @param      DriverCustomer $v
	 * @return     Fare The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setDriverCustomer(DriverCustomer $v = null)
	{
		if ($v === null) {
			$this->setCustomerId(NULL);
		} else {
			$this->setCustomerId($v->getId());
		}

		$this->aDriverCustomer = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the DriverCustomer object, it will not be re-added.
		if ($v !== null) {
			$v->addFare($this);
		}

		return $this;
	}


	/**
	 * Get the associated DriverCustomer object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     DriverCustomer The associated DriverCustomer object.
	 * @throws     PropelException
	 */
	public function getDriverCustomer(PropelPDO $con = null)
	{
		if ($this->aDriverCustomer === null && ($this->customer_id !== null)) {
			$this->aDriverCustomer = DriverCustomerPeer::retrieveByPk($this->customer_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aDriverCustomer->addFares($this);
			 */
		}
		return $this->aDriverCustomer;
	}

	/**
	 * Clears out the collPrimes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPrimes()
	 */
	public function clearPrimes()
	{
		$this->collPrimes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPrimes collection (array).
	 *
	 * By default this just sets the collPrimes collection to an empty array (like clearcollPrimes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPrimes()
	{
		$this->collPrimes = array();
	}

	/**
	 * Gets an array of Prime objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Fare has previously been saved, it will retrieve
	 * related Primes from storage. If this Fare is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Prime[]
	 * @throws     PropelException
	 */
	public function getPrimes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FarePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrimes === null) {
			if ($this->isNew()) {
			   $this->collPrimes = array();
			} else {

				$criteria->add(PrimePeer::FARE_ID, $this->id);

				PrimePeer::addSelectColumns($criteria);
				$this->collPrimes = PrimePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PrimePeer::FARE_ID, $this->id);

				PrimePeer::addSelectColumns($criteria);
				if (!isset($this->lastPrimeCriteria) || !$this->lastPrimeCriteria->equals($criteria)) {
					$this->collPrimes = PrimePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPrimeCriteria = $criteria;
		return $this->collPrimes;
	}

	/**
	 * Returns the number of related Prime objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Prime objects.
	 * @throws     PropelException
	 */
	public function countPrimes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FarePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPrimes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PrimePeer::FARE_ID, $this->id);

				$count = PrimePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PrimePeer::FARE_ID, $this->id);

				if (!isset($this->lastPrimeCriteria) || !$this->lastPrimeCriteria->equals($criteria)) {
					$count = PrimePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPrimes);
				}
			} else {
				$count = count($this->collPrimes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Prime object to this object
	 * through the Prime foreign key attribute.
	 *
	 * @param      Prime $l Prime
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPrime(Prime $l)
	{
		if ($this->collPrimes === null) {
			$this->initPrimes();
		}
		if (!in_array($l, $this->collPrimes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPrimes, $l);
			$l->setFare($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fare is new, it will return
	 * an empty collection; or if this Fare has previously
	 * been saved, it will retrieve related Primes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fare.
	 */
	public function getPrimesJoinDriverRelatedByDriverId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FarePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrimes === null) {
			if ($this->isNew()) {
				$this->collPrimes = array();
			} else {

				$criteria->add(PrimePeer::FARE_ID, $this->id);

				$this->collPrimes = PrimePeer::doSelectJoinDriverRelatedByDriverId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrimePeer::FARE_ID, $this->id);

			if (!isset($this->lastPrimeCriteria) || !$this->lastPrimeCriteria->equals($criteria)) {
				$this->collPrimes = PrimePeer::doSelectJoinDriverRelatedByDriverId($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrimeCriteria = $criteria;

		return $this->collPrimes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fare is new, it will return
	 * an empty collection; or if this Fare has previously
	 * been saved, it will retrieve related Primes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fare.
	 */
	public function getPrimesJoinDriverRelatedByPayerId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FarePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrimes === null) {
			if ($this->isNew()) {
				$this->collPrimes = array();
			} else {

				$criteria->add(PrimePeer::FARE_ID, $this->id);

				$this->collPrimes = PrimePeer::doSelectJoinDriverRelatedByPayerId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrimePeer::FARE_ID, $this->id);

			if (!isset($this->lastPrimeCriteria) || !$this->lastPrimeCriteria->equals($criteria)) {
				$this->collPrimes = PrimePeer::doSelectJoinDriverRelatedByPayerId($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrimeCriteria = $criteria;

		return $this->collPrimes;
	}

	/**
	 * Clears out the collParticipations collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addParticipations()
	 */
	public function clearParticipations()
	{
		$this->collParticipations = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collParticipations collection (array).
	 *
	 * By default this just sets the collParticipations collection to an empty array (like clearcollParticipations());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initParticipations()
	{
		$this->collParticipations = array();
	}

	/**
	 * Gets an array of Participation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Fare has previously been saved, it will retrieve
	 * related Participations from storage. If this Fare is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Participation[]
	 * @throws     PropelException
	 */
	public function getParticipations($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FarePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collParticipations === null) {
			if ($this->isNew()) {
			   $this->collParticipations = array();
			} else {

				$criteria->add(ParticipationPeer::FARE_ID, $this->id);

				ParticipationPeer::addSelectColumns($criteria);
				$this->collParticipations = ParticipationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ParticipationPeer::FARE_ID, $this->id);

				ParticipationPeer::addSelectColumns($criteria);
				if (!isset($this->lastParticipationCriteria) || !$this->lastParticipationCriteria->equals($criteria)) {
					$this->collParticipations = ParticipationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastParticipationCriteria = $criteria;
		return $this->collParticipations;
	}

	/**
	 * Returns the number of related Participation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Participation objects.
	 * @throws     PropelException
	 */
	public function countParticipations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FarePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collParticipations === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ParticipationPeer::FARE_ID, $this->id);

				$count = ParticipationPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ParticipationPeer::FARE_ID, $this->id);

				if (!isset($this->lastParticipationCriteria) || !$this->lastParticipationCriteria->equals($criteria)) {
					$count = ParticipationPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collParticipations);
				}
			} else {
				$count = count($this->collParticipations);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Participation object to this object
	 * through the Participation foreign key attribute.
	 *
	 * @param      Participation $l Participation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addParticipation(Participation $l)
	{
		if ($this->collParticipations === null) {
			$this->initParticipations();
		}
		if (!in_array($l, $this->collParticipations, true)) { // only add it if the **same** object is not already associated
			array_push($this->collParticipations, $l);
			$l->setFare($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fare is new, it will return
	 * an empty collection; or if this Fare has previously
	 * been saved, it will retrieve related Participations from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fare.
	 */
	public function getParticipationsJoinDriver($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FarePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collParticipations === null) {
			if ($this->isNew()) {
				$this->collParticipations = array();
			} else {

				$criteria->add(ParticipationPeer::FARE_ID, $this->id);

				$this->collParticipations = ParticipationPeer::doSelectJoinDriver($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ParticipationPeer::FARE_ID, $this->id);

			if (!isset($this->lastParticipationCriteria) || !$this->lastParticipationCriteria->equals($criteria)) {
				$this->collParticipations = ParticipationPeer::doSelectJoinDriver($criteria, $con, $join_behavior);
			}
		}
		$this->lastParticipationCriteria = $criteria;

		return $this->collParticipations;
	}

	/**
	 * Clears out the collUserUnavailabilitys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserUnavailabilitys()
	 */
	public function clearUserUnavailabilitys()
	{
		$this->collUserUnavailabilitys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserUnavailabilitys collection (array).
	 *
	 * By default this just sets the collUserUnavailabilitys collection to an empty array (like clearcollUserUnavailabilitys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserUnavailabilitys()
	{
		$this->collUserUnavailabilitys = array();
	}

	/**
	 * Gets an array of UserUnavailability objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Fare has previously been saved, it will retrieve
	 * related UserUnavailabilitys from storage. If this Fare is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserUnavailability[]
	 * @throws     PropelException
	 */
	public function getUserUnavailabilitys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FarePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserUnavailabilitys === null) {
			if ($this->isNew()) {
			   $this->collUserUnavailabilitys = array();
			} else {

				$criteria->add(UserUnavailabilityPeer::FARE_ID, $this->id);

				UserUnavailabilityPeer::addSelectColumns($criteria);
				$this->collUserUnavailabilitys = UserUnavailabilityPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserUnavailabilityPeer::FARE_ID, $this->id);

				UserUnavailabilityPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserUnavailabilityCriteria) || !$this->lastUserUnavailabilityCriteria->equals($criteria)) {
					$this->collUserUnavailabilitys = UserUnavailabilityPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserUnavailabilityCriteria = $criteria;
		return $this->collUserUnavailabilitys;
	}

	/**
	 * Returns the number of related UserUnavailability objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserUnavailability objects.
	 * @throws     PropelException
	 */
	public function countUserUnavailabilitys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FarePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserUnavailabilitys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserUnavailabilityPeer::FARE_ID, $this->id);

				$count = UserUnavailabilityPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserUnavailabilityPeer::FARE_ID, $this->id);

				if (!isset($this->lastUserUnavailabilityCriteria) || !$this->lastUserUnavailabilityCriteria->equals($criteria)) {
					$count = UserUnavailabilityPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUserUnavailabilitys);
				}
			} else {
				$count = count($this->collUserUnavailabilitys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserUnavailability object to this object
	 * through the UserUnavailability foreign key attribute.
	 *
	 * @param      UserUnavailability $l UserUnavailability
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserUnavailability(UserUnavailability $l)
	{
		if ($this->collUserUnavailabilitys === null) {
			$this->initUserUnavailabilitys();
		}
		if (!in_array($l, $this->collUserUnavailabilitys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserUnavailabilitys, $l);
			$l->setFare($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fare is new, it will return
	 * an empty collection; or if this Fare has previously
	 * been saved, it will retrieve related UserUnavailabilitys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fare.
	 */
	public function getUserUnavailabilitysJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FarePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserUnavailabilitys === null) {
			if ($this->isNew()) {
				$this->collUserUnavailabilitys = array();
			} else {

				$criteria->add(UserUnavailabilityPeer::FARE_ID, $this->id);

				$this->collUserUnavailabilitys = UserUnavailabilityPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserUnavailabilityPeer::FARE_ID, $this->id);

			if (!isset($this->lastUserUnavailabilityCriteria) || !$this->lastUserUnavailabilityCriteria->equals($criteria)) {
				$this->collUserUnavailabilitys = UserUnavailabilityPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserUnavailabilityCriteria = $criteria;

		return $this->collUserUnavailabilitys;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collPrimes) {
				foreach ((array) $this->collPrimes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collParticipations) {
				foreach ((array) $this->collParticipations as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserUnavailabilitys) {
				foreach ((array) $this->collUserUnavailabilitys as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collPrimes = null;
		$this->collParticipations = null;
		$this->collUserUnavailabilitys = null;
			$this->aDriver = null;
			$this->aDriverCustomer = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseFare:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseFare::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseFare
